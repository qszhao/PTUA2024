{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c4f8183",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 49 mystery mystery\n",
      "1 2\n",
      "2 3\n",
      "2 3\n",
      "4 3 1\n",
      "3 4\n",
      "5 4 2 1\n",
      "4 4\n",
      "8 3 5 2\n",
      "5 7\n",
      "15 11 8 9 6 3 4\n",
      "6 2\n",
      "9 5\n",
      "7 3\n",
      "14 13 8\n",
      "8 5\n",
      "12 11 5 4 7\n",
      "9 6\n",
      "26 22 15 10 6 5\n",
      "10 3\n",
      "20 17 9\n",
      "11 4\n",
      "16 12 5 8\n",
      "12 5\n",
      "16 14 13 11 8\n",
      "13 3\n",
      "14 12 7\n",
      "14 6\n",
      "19 12 13 16 18 7\n",
      "15 4\n",
      "25 16 5 9\n",
      "16 7\n",
      "25 24 18 15 11 12 14\n",
      "17 3\n",
      "23 20 10\n",
      "18 4\n",
      "24 19 16 14\n",
      "19 3\n",
      "18 24 14\n",
      "20 9\n",
      "35 33 27 22 23 32 40 17 10\n",
      "21 4\n",
      "34 24 30 9\n",
      "22 5\n",
      "28 27 26 20 9\n",
      "23 3\n",
      "32 17 20\n",
      "24 6\n",
      "30 25 16 18 21 19\n",
      "25 5\n",
      "29 15 26 16 24\n",
      "26 4\n",
      "28 22 9 25\n",
      "27 4\n",
      "33 28 20 22\n",
      "28 7\n",
      "38 29 27 33 35 22 26\n",
      "29 4\n",
      "37 30 28 25\n",
      "30 4\n",
      "37 29 24 21\n",
      "31 2\n",
      "36 34\n",
      "32 4\n",
      "41 40 23 20\n",
      "33 4\n",
      "35 20 27 28\n",
      "34 4\n",
      "42 36 21 31\n",
      "35 5\n",
      "44 38 20 33 28\n",
      "36 5\n",
      "46 39 34 42 31\n",
      "37 5\n",
      "45 38 43 29 30\n",
      "38 4\n",
      "43 35 28 37\n",
      "39 2\n",
      "46 36\n",
      "40 4\n",
      "47 41 32 20\n",
      "41 3\n",
      "47 32 40\n",
      "42 2\n",
      "34 36\n",
      "43 5\n",
      "48 45 44 38 37\n",
      "44 4\n",
      "49 48 35 43\n",
      "45 4\n",
      "48 49 37 43\n",
      "46 2\n",
      "36 39\n",
      "47 2\n",
      "40 41\n",
      "48 4\n",
      "49 44 43 45\n",
      "49 3\n",
      "44 48 45\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Read in Lab04-1.gal\n",
    "with open(r\"C:\\Users\\manue\\OneDrive - University of Glasgow\\URBAN5123 - Programming Tools for UA\\Labs\\PTUA2024\\Lab04\\Lab\\Lab04-1.gal\", \"r\") as f:\n",
    "    file_content = f.read()\n",
    "print(file_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "73940d18",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0 49 mystery mystery', '1 2', '2 3', '2 3', '4 3 1', '3 4', '5 4 2 1', '4 4', '8 3 5 2', '5 7', '15 11 8 9 6 3 4', '6 2', '9 5', '7 3', '14 13 8', '8 5', '12 11 5 4 7', '9 6', '26 22 15 10 6 5', '10 3', '20 17 9', '11 4', '16 12 5 8', '12 5', '16 14 13 11 8', '13 3', '14 12 7', '14 6', '19 12 13 16 18 7', '15 4', '25 16 5 9', '16 7', '25 24 18 15 11 12 14', '17 3', '23 20 10', '18 4', '24 19 16 14', '19 3', '18 24 14', '20 9', '35 33 27 22 23 32 40 17 10', '21 4', '34 24 30 9', '22 5', '28 27 26 20 9', '23 3', '32 17 20', '24 6', '30 25 16 18 21 19', '25 5', '29 15 26 16 24', '26 4', '28 22 9 25', '27 4', '33 28 20 22', '28 7', '38 29 27 33 35 22 26', '29 4', '37 30 28 25', '30 4', '37 29 24 21', '31 2', '36 34', '32 4', '41 40 23 20', '33 4', '35 20 27 28', '34 4', '42 36 21 31', '35 5', '44 38 20 33 28', '36 5', '46 39 34 42 31', '37 5', '45 38 43 29 30', '38 4', '43 35 28 37', '39 2', '46 36', '40 4', '47 41 32 20', '41 3', '47 32 40', '42 2', '34 36', '43 5', '48 45 44 38 37', '44 4', '49 48 35 43', '45 4', '48 49 37 43', '46 2', '36 39', '47 2', '40 41', '48 4', '49 44 43 45', '49 3', '44 48 45']\n"
     ]
    }
   ],
   "source": [
    "# Save the contents to a list (assuming each line is a separate item)\n",
    "data = file_content.splitlines()\n",
    "\n",
    "# Print the object to confirm\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e76ce1c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1 2', '2 3', '2 3', '4 3 1', '3 4', '5 4 2 1', '4 4', '8 3 5 2', '5 7', '15 11 8 9 6 3 4', '6 2', '9 5', '7 3', '14 13 8', '8 5', '12 11 5 4 7', '9 6', '26 22 15 10 6 5', '10 3', '20 17 9', '11 4', '16 12 5 8', '12 5', '16 14 13 11 8', '13 3', '14 12 7', '14 6', '19 12 13 16 18 7', '15 4', '25 16 5 9', '16 7', '25 24 18 15 11 12 14', '17 3', '23 20 10', '18 4', '24 19 16 14', '19 3', '18 24 14', '20 9', '35 33 27 22 23 32 40 17 10', '21 4', '34 24 30 9', '22 5', '28 27 26 20 9', '23 3', '32 17 20', '24 6', '30 25 16 18 21 19', '25 5', '29 15 26 16 24', '26 4', '28 22 9 25', '27 4', '33 28 20 22', '28 7', '38 29 27 33 35 22 26', '29 4', '37 30 28 25', '30 4', '37 29 24 21', '31 2', '36 34', '32 4', '41 40 23 20', '33 4', '35 20 27 28', '34 4', '42 36 21 31', '35 5', '44 38 20 33 28', '36 5', '46 39 34 42 31', '37 5', '45 38 43 29 30', '38 4', '43 35 28 37', '39 2', '46 36', '40 4', '47 41 32 20', '41 3', '47 32 40', '42 2', '34 36', '43 5', '48 45 44 38 37', '44 4', '49 48 35 43', '45 4', '48 49 37 43', '46 2', '36 39', '47 2', '40 41', '48 4', '49 44 43 45', '49 3', '44 48 45']\n"
     ]
    }
   ],
   "source": [
    "# Delete first element in data\n",
    "del(data[0])\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d3d27106",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 2), (2, 3), (2, 3), (4, 3, 1), (3, 4), (5, 4, 2, 1), (4, 4), (8, 3, 5, 2), (5, 7), (15, 11, 8, 9, 6, 3, 4), (6, 2), (9, 5), (7, 3), (14, 13, 8), (8, 5), (12, 11, 5, 4, 7), (9, 6), (26, 22, 15, 10, 6, 5), (10, 3), (20, 17, 9), (11, 4), (16, 12, 5, 8), (12, 5), (16, 14, 13, 11, 8), (13, 3), (14, 12, 7), (14, 6), (19, 12, 13, 16, 18, 7), (15, 4), (25, 16, 5, 9), (16, 7), (25, 24, 18, 15, 11, 12, 14), (17, 3), (23, 20, 10), (18, 4), (24, 19, 16, 14), (19, 3), (18, 24, 14), (20, 9), (35, 33, 27, 22, 23, 32, 40, 17, 10), (21, 4), (34, 24, 30, 9), (22, 5), (28, 27, 26, 20, 9), (23, 3), (32, 17, 20), (24, 6), (30, 25, 16, 18, 21, 19), (25, 5), (29, 15, 26, 16, 24), (26, 4), (28, 22, 9, 25), (27, 4), (33, 28, 20, 22), (28, 7), (38, 29, 27, 33, 35, 22, 26), (29, 4), (37, 30, 28, 25), (30, 4), (37, 29, 24, 21), (31, 2), (36, 34), (32, 4), (41, 40, 23, 20), (33, 4), (35, 20, 27, 28), (34, 4), (42, 36, 21, 31), (35, 5), (44, 38, 20, 33, 28), (36, 5), (46, 39, 34, 42, 31), (37, 5), (45, 38, 43, 29, 30), (38, 4), (43, 35, 28, 37), (39, 2), (46, 36), (40, 4), (47, 41, 32, 20), (41, 3), (47, 32, 40), (42, 2), (34, 36), (43, 5), (48, 45, 44, 38, 37), (44, 4), (49, 48, 35, 43), (45, 4), (48, 49, 37, 43), (46, 2), (36, 39), (47, 2), (40, 41), (48, 4), (49, 44, 43, 45), (49, 3), (44, 48, 45)]\n"
     ]
    }
   ],
   "source": [
    "# Split each string into a list of integers\n",
    "list_of_lists = [[int(x) for x in item.split()] for item in data]\n",
    "\n",
    "# Convert the list of lists to a list of tuples\n",
    "tuple_list = [(item[0], *item[1:]) for item in list_of_lists]\n",
    "print(tuple_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "24162e29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: [2, 3], 2: [4, 3, 1], 3: [5, 4, 2, 1], 4: [8, 3, 5, 2], 5: [15, 11, 8, 9, 6, 3, 4], 6: [9, 5], 7: [14, 13, 8], 8: [12, 11, 5, 4, 7], 9: [26, 22, 15, 10, 6, 5], 10: [20, 17, 9], 11: [16, 12, 5, 8], 12: [16, 14, 13, 11, 8], 13: [14, 12, 7], 14: [19, 12, 13, 16, 18, 7], 15: [25, 16, 5, 9], 16: [25, 24, 18, 15, 11, 12, 14], 17: [23, 20, 10], 18: [24, 19, 16, 14], 19: [18, 24, 14], 20: [35, 33, 27, 22, 23, 32, 40, 17, 10], 21: [34, 24, 30, 9], 22: [28, 27, 26, 20, 9], 23: [32, 17, 20], 24: [30, 25, 16, 18, 21, 19], 25: [29, 15, 26, 16, 24], 26: [28, 22, 9, 25], 27: [33, 28, 20, 22], 28: [38, 29, 27, 33, 35, 22, 26], 29: [37, 30, 28, 25], 30: [37, 29, 24, 21], 31: [36, 34], 32: [41, 40, 23, 20], 33: [35, 20, 27, 28], 34: [42, 36, 21, 31], 35: [44, 38, 20, 33, 28], 36: [46, 39, 34, 42, 31], 37: [45, 38, 43, 29, 30], 38: [43, 35, 28, 37], 39: [46, 36], 40: [47, 41, 32, 20], 41: [47, 32, 40], 42: [34, 36], 43: [48, 45, 44, 38, 37], 44: [49, 48, 35, 43], 45: [48, 49, 37, 43], 46: [36, 39], 47: [40, 41], 48: [49, 44, 43, 45], 49: [44, 48, 45]}\n"
     ]
    }
   ],
   "source": [
    "# Return a Python dictionary where the key is the id of a spatial unit and the value is a list of the ids of its neighbors.\n",
    "gal_dict = {}\n",
    "key = None\n",
    "values = []\n",
    "\n",
    "for i, element in enumerate(tuple_list):\n",
    "    if i % 2 == 0:\n",
    "        if key is not None:\n",
    "            gal_dict[key] = values\n",
    "        key = element[0]\n",
    "        values = []\n",
    "    else:\n",
    "        values.extend(element)  # Add all elements from odd-indexed tuples to values\n",
    "\n",
    "# Add the last key-value pair\n",
    "gal_dict[key] = values\n",
    "\n",
    "print(gal_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a952c9f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{2: [1, 6, 31, 39, 42, 46, 47], 3: [2, 7, 10, 13, 17, 19, 23, 41, 49], 4: [3, 4, 11, 15, 18, 21, 26, 27, 29, 30, 32, 33, 34, 38, 40, 44, 45, 48], 7: [5, 16, 28], 5: [8, 12, 22, 25, 35, 36, 37, 43], 6: [9, 14, 24], 9: [20]}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Take a gal dictionary from 1 and return a second dictionary that has the histogram for the neighbor cardinalities.\n",
    "# In the second dictionary, the key is the number of neighbors and the value is the list of ids that have key neighbors.\n",
    "# It is up to you if you want to draw the histogram.\n",
    "\n",
    "dict_2 = {}\n",
    "for key, val in gal_dict.items():\n",
    "    value_count = len(val)\n",
    "    if value_count in dict_2:\n",
    "        dict_2[value_count].append(key)\n",
    "    else:\n",
    "        dict_2[value_count] = [key]\n",
    "\n",
    "print(dict_2)\n",
    "\n",
    "# Histogram\n",
    "import matplotlib.pyplot as plt\n",
    "plt.hist(dict_2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0d499a85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 [2, 3]\n",
      "1  says  2 is a neighbor\n",
      "ok\n",
      "1  says  3 is a neighbor\n",
      "ok\n",
      "2 [4, 3, 1]\n",
      "2  says  4 is a neighbor\n",
      "ok\n",
      "2  says  3 is a neighbor\n",
      "ok\n",
      "2  says  1 is a neighbor\n",
      "ok\n",
      "3 [5, 4, 2, 1]\n",
      "3  says  5 is a neighbor\n",
      "ok\n",
      "3  says  4 is a neighbor\n",
      "ok\n",
      "3  says  2 is a neighbor\n",
      "ok\n",
      "3  says  1 is a neighbor\n",
      "ok\n",
      "4 [8, 3, 5, 2]\n",
      "4  says  8 is a neighbor\n",
      "ok\n",
      "4  says  3 is a neighbor\n",
      "ok\n",
      "4  says  5 is a neighbor\n",
      "ok\n",
      "4  says  2 is a neighbor\n",
      "ok\n",
      "5 [15, 11, 8, 9, 6, 3, 4]\n",
      "5  says  15 is a neighbor\n",
      "ok\n",
      "5  says  11 is a neighbor\n",
      "ok\n",
      "5  says  8 is a neighbor\n",
      "ok\n",
      "5  says  9 is a neighbor\n",
      "ok\n",
      "5  says  6 is a neighbor\n",
      "ok\n",
      "5  says  3 is a neighbor\n",
      "ok\n",
      "5  says  4 is a neighbor\n",
      "ok\n",
      "6 [9, 5]\n",
      "6  says  9 is a neighbor\n",
      "ok\n",
      "6  says  5 is a neighbor\n",
      "ok\n",
      "7 [14, 13, 8]\n",
      "7  says  14 is a neighbor\n",
      "ok\n",
      "7  says  13 is a neighbor\n",
      "ok\n",
      "7  says  8 is a neighbor\n",
      "ok\n",
      "8 [12, 11, 5, 4, 7]\n",
      "8  says  12 is a neighbor\n",
      "ok\n",
      "8  says  11 is a neighbor\n",
      "ok\n",
      "8  says  5 is a neighbor\n",
      "ok\n",
      "8  says  4 is a neighbor\n",
      "ok\n",
      "8  says  7 is a neighbor\n",
      "ok\n",
      "9 [26, 22, 15, 10, 6, 5]\n",
      "9  says  26 is a neighbor\n",
      "ok\n",
      "9  says  22 is a neighbor\n",
      "ok\n",
      "9  says  15 is a neighbor\n",
      "ok\n",
      "9  says  10 is a neighbor\n",
      "ok\n",
      "9  says  6 is a neighbor\n",
      "ok\n",
      "9  says  5 is a neighbor\n",
      "ok\n",
      "10 [20, 17, 9]\n",
      "10  says  20 is a neighbor\n",
      "ok\n",
      "10  says  17 is a neighbor\n",
      "ok\n",
      "10  says  9 is a neighbor\n",
      "ok\n",
      "11 [16, 12, 5, 8]\n",
      "11  says  16 is a neighbor\n",
      "ok\n",
      "11  says  12 is a neighbor\n",
      "ok\n",
      "11  says  5 is a neighbor\n",
      "ok\n",
      "11  says  8 is a neighbor\n",
      "ok\n",
      "12 [16, 14, 13, 11, 8]\n",
      "12  says  16 is a neighbor\n",
      "ok\n",
      "12  says  14 is a neighbor\n",
      "ok\n",
      "12  says  13 is a neighbor\n",
      "ok\n",
      "12  says  11 is a neighbor\n",
      "ok\n",
      "12  says  8 is a neighbor\n",
      "ok\n",
      "13 [14, 12, 7]\n",
      "13  says  14 is a neighbor\n",
      "ok\n",
      "13  says  12 is a neighbor\n",
      "ok\n",
      "13  says  7 is a neighbor\n",
      "ok\n",
      "14 [19, 12, 13, 16, 18, 7]\n",
      "14  says  19 is a neighbor\n",
      "ok\n",
      "14  says  12 is a neighbor\n",
      "ok\n",
      "14  says  13 is a neighbor\n",
      "ok\n",
      "14  says  16 is a neighbor\n",
      "ok\n",
      "14  says  18 is a neighbor\n",
      "ok\n",
      "14  says  7 is a neighbor\n",
      "ok\n",
      "15 [25, 16, 5, 9]\n",
      "15  says  25 is a neighbor\n",
      "ok\n",
      "15  says  16 is a neighbor\n",
      "ok\n",
      "15  says  5 is a neighbor\n",
      "ok\n",
      "15  says  9 is a neighbor\n",
      "ok\n",
      "16 [25, 24, 18, 15, 11, 12, 14]\n",
      "16  says  25 is a neighbor\n",
      "ok\n",
      "16  says  24 is a neighbor\n",
      "ok\n",
      "16  says  18 is a neighbor\n",
      "ok\n",
      "16  says  15 is a neighbor\n",
      "ok\n",
      "16  says  11 is a neighbor\n",
      "ok\n",
      "16  says  12 is a neighbor\n",
      "ok\n",
      "16  says  14 is a neighbor\n",
      "ok\n",
      "17 [23, 20, 10]\n",
      "17  says  23 is a neighbor\n",
      "ok\n",
      "17  says  20 is a neighbor\n",
      "ok\n",
      "17  says  10 is a neighbor\n",
      "ok\n",
      "18 [24, 19, 16, 14]\n",
      "18  says  24 is a neighbor\n",
      "ok\n",
      "18  says  19 is a neighbor\n",
      "ok\n",
      "18  says  16 is a neighbor\n",
      "ok\n",
      "18  says  14 is a neighbor\n",
      "ok\n",
      "19 [18, 24, 14]\n",
      "19  says  18 is a neighbor\n",
      "ok\n",
      "19  says  24 is a neighbor\n",
      "ok\n",
      "19  says  14 is a neighbor\n",
      "ok\n",
      "20 [35, 33, 27, 22, 23, 32, 40, 17, 10]\n",
      "20  says  35 is a neighbor\n",
      "ok\n",
      "20  says  33 is a neighbor\n",
      "ok\n",
      "20  says  27 is a neighbor\n",
      "ok\n",
      "20  says  22 is a neighbor\n",
      "ok\n",
      "20  says  23 is a neighbor\n",
      "ok\n",
      "20  says  32 is a neighbor\n",
      "ok\n",
      "20  says  40 is a neighbor\n",
      "ok\n",
      "20  says  17 is a neighbor\n",
      "ok\n",
      "20  says  10 is a neighbor\n",
      "ok\n",
      "21 [34, 24, 30, 9]\n",
      "21  says  34 is a neighbor\n",
      "ok\n",
      "21  says  24 is a neighbor\n",
      "ok\n",
      "21  says  30 is a neighbor\n",
      "ok\n",
      "21  says  9 is a neighbor\n",
      "not ok\n",
      "because  9  says that  21 is not a neighbor\n",
      "22 [28, 27, 26, 20, 9]\n",
      "22  says  28 is a neighbor\n",
      "ok\n",
      "22  says  27 is a neighbor\n",
      "ok\n",
      "22  says  26 is a neighbor\n",
      "ok\n",
      "22  says  20 is a neighbor\n",
      "ok\n",
      "22  says  9 is a neighbor\n",
      "ok\n",
      "23 [32, 17, 20]\n",
      "23  says  32 is a neighbor\n",
      "ok\n",
      "23  says  17 is a neighbor\n",
      "ok\n",
      "23  says  20 is a neighbor\n",
      "ok\n",
      "24 [30, 25, 16, 18, 21, 19]\n",
      "24  says  30 is a neighbor\n",
      "ok\n",
      "24  says  25 is a neighbor\n",
      "ok\n",
      "24  says  16 is a neighbor\n",
      "ok\n",
      "24  says  18 is a neighbor\n",
      "ok\n",
      "24  says  21 is a neighbor\n",
      "ok\n",
      "24  says  19 is a neighbor\n",
      "ok\n",
      "25 [29, 15, 26, 16, 24]\n",
      "25  says  29 is a neighbor\n",
      "ok\n",
      "25  says  15 is a neighbor\n",
      "ok\n",
      "25  says  26 is a neighbor\n",
      "ok\n",
      "25  says  16 is a neighbor\n",
      "ok\n",
      "25  says  24 is a neighbor\n",
      "ok\n",
      "26 [28, 22, 9, 25]\n",
      "26  says  28 is a neighbor\n",
      "ok\n",
      "26  says  22 is a neighbor\n",
      "ok\n",
      "26  says  9 is a neighbor\n",
      "ok\n",
      "26  says  25 is a neighbor\n",
      "ok\n",
      "27 [33, 28, 20, 22]\n",
      "27  says  33 is a neighbor\n",
      "ok\n",
      "27  says  28 is a neighbor\n",
      "ok\n",
      "27  says  20 is a neighbor\n",
      "ok\n",
      "27  says  22 is a neighbor\n",
      "ok\n",
      "28 [38, 29, 27, 33, 35, 22, 26]\n",
      "28  says  38 is a neighbor\n",
      "ok\n",
      "28  says  29 is a neighbor\n",
      "ok\n",
      "28  says  27 is a neighbor\n",
      "ok\n",
      "28  says  33 is a neighbor\n",
      "ok\n",
      "28  says  35 is a neighbor\n",
      "ok\n",
      "28  says  22 is a neighbor\n",
      "ok\n",
      "28  says  26 is a neighbor\n",
      "ok\n",
      "29 [37, 30, 28, 25]\n",
      "29  says  37 is a neighbor\n",
      "ok\n",
      "29  says  30 is a neighbor\n",
      "ok\n",
      "29  says  28 is a neighbor\n",
      "ok\n",
      "29  says  25 is a neighbor\n",
      "ok\n",
      "30 [37, 29, 24, 21]\n",
      "30  says  37 is a neighbor\n",
      "ok\n",
      "30  says  29 is a neighbor\n",
      "ok\n",
      "30  says  24 is a neighbor\n",
      "ok\n",
      "30  says  21 is a neighbor\n",
      "ok\n",
      "31 [36, 34]\n",
      "31  says  36 is a neighbor\n",
      "ok\n",
      "31  says  34 is a neighbor\n",
      "ok\n",
      "32 [41, 40, 23, 20]\n",
      "32  says  41 is a neighbor\n",
      "ok\n",
      "32  says  40 is a neighbor\n",
      "ok\n",
      "32  says  23 is a neighbor\n",
      "ok\n",
      "32  says  20 is a neighbor\n",
      "ok\n",
      "33 [35, 20, 27, 28]\n",
      "33  says  35 is a neighbor\n",
      "ok\n",
      "33  says  20 is a neighbor\n",
      "ok\n",
      "33  says  27 is a neighbor\n",
      "ok\n",
      "33  says  28 is a neighbor\n",
      "ok\n",
      "34 [42, 36, 21, 31]\n",
      "34  says  42 is a neighbor\n",
      "ok\n",
      "34  says  36 is a neighbor\n",
      "ok\n",
      "34  says  21 is a neighbor\n",
      "ok\n",
      "34  says  31 is a neighbor\n",
      "ok\n",
      "35 [44, 38, 20, 33, 28]\n",
      "35  says  44 is a neighbor\n",
      "ok\n",
      "35  says  38 is a neighbor\n",
      "ok\n",
      "35  says  20 is a neighbor\n",
      "ok\n",
      "35  says  33 is a neighbor\n",
      "ok\n",
      "35  says  28 is a neighbor\n",
      "ok\n",
      "36 [46, 39, 34, 42, 31]\n",
      "36  says  46 is a neighbor\n",
      "ok\n",
      "36  says  39 is a neighbor\n",
      "ok\n",
      "36  says  34 is a neighbor\n",
      "ok\n",
      "36  says  42 is a neighbor\n",
      "ok\n",
      "36  says  31 is a neighbor\n",
      "ok\n",
      "37 [45, 38, 43, 29, 30]\n",
      "37  says  45 is a neighbor\n",
      "ok\n",
      "37  says  38 is a neighbor\n",
      "ok\n",
      "37  says  43 is a neighbor\n",
      "ok\n",
      "37  says  29 is a neighbor\n",
      "ok\n",
      "37  says  30 is a neighbor\n",
      "ok\n",
      "38 [43, 35, 28, 37]\n",
      "38  says  43 is a neighbor\n",
      "ok\n",
      "38  says  35 is a neighbor\n",
      "ok\n",
      "38  says  28 is a neighbor\n",
      "ok\n",
      "38  says  37 is a neighbor\n",
      "ok\n",
      "39 [46, 36]\n",
      "39  says  46 is a neighbor\n",
      "ok\n",
      "39  says  36 is a neighbor\n",
      "ok\n",
      "40 [47, 41, 32, 20]\n",
      "40  says  47 is a neighbor\n",
      "ok\n",
      "40  says  41 is a neighbor\n",
      "ok\n",
      "40  says  32 is a neighbor\n",
      "ok\n",
      "40  says  20 is a neighbor\n",
      "ok\n",
      "41 [47, 32, 40]\n",
      "41  says  47 is a neighbor\n",
      "ok\n",
      "41  says  32 is a neighbor\n",
      "ok\n",
      "41  says  40 is a neighbor\n",
      "ok\n",
      "42 [34, 36]\n",
      "42  says  34 is a neighbor\n",
      "ok\n",
      "42  says  36 is a neighbor\n",
      "ok\n",
      "43 [48, 45, 44, 38, 37]\n",
      "43  says  48 is a neighbor\n",
      "ok\n",
      "43  says  45 is a neighbor\n",
      "ok\n",
      "43  says  44 is a neighbor\n",
      "ok\n",
      "43  says  38 is a neighbor\n",
      "ok\n",
      "43  says  37 is a neighbor\n",
      "ok\n",
      "44 [49, 48, 35, 43]\n",
      "44  says  49 is a neighbor\n",
      "ok\n",
      "44  says  48 is a neighbor\n",
      "ok\n",
      "44  says  35 is a neighbor\n",
      "ok\n",
      "44  says  43 is a neighbor\n",
      "ok\n",
      "45 [48, 49, 37, 43]\n",
      "45  says  48 is a neighbor\n",
      "ok\n",
      "45  says  49 is a neighbor\n",
      "ok\n",
      "45  says  37 is a neighbor\n",
      "ok\n",
      "45  says  43 is a neighbor\n",
      "ok\n",
      "46 [36, 39]\n",
      "46  says  36 is a neighbor\n",
      "ok\n",
      "46  says  39 is a neighbor\n",
      "ok\n",
      "47 [40, 41]\n",
      "47  says  40 is a neighbor\n",
      "ok\n",
      "47  says  41 is a neighbor\n",
      "ok\n",
      "48 [49, 44, 43, 45]\n",
      "48  says  49 is a neighbor\n",
      "ok\n",
      "48  says  44 is a neighbor\n",
      "ok\n",
      "48  says  43 is a neighbor\n",
      "ok\n",
      "48  says  45 is a neighbor\n",
      "ok\n",
      "49 [44, 48, 45]\n",
      "49  says  44 is a neighbor\n",
      "ok\n",
      "49  says  48 is a neighbor\n",
      "ok\n",
      "49  says  45 is a neighbor\n",
      "ok\n"
     ]
    }
   ],
   "source": [
    "# Take a gal dictionary from 1 and test if there are any asymmetries.\n",
    "# An asymmetry occurs when i says j is a neighbor of i, but j does not say i is a neighbor of j.\n",
    "\n",
    "for key in gal_dict:\n",
    "    print(key, gal_dict[key])\n",
    "    for neighbor in gal_dict[key]:\n",
    "        print(key,' says ', neighbor, 'is a neighbor')\n",
    "        if key in gal_dict[neighbor]:\n",
    "            print('ok')\n",
    "        else:\n",
    "            print('not ok')\n",
    "            print('because ', neighbor, ' says that ', key, 'is not a neighbor')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
