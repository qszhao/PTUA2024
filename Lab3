{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "795ebbc9",
   "metadata": {},
   "source": [
    "Exercise 1  \n",
    "Repeating my advice from the previous chapter, whenever you learn a new feature, you should try it out in interactive mode and make errors on purpose to see what goes wrong.\n",
    "\n",
    "We’ve seen that n = 42 is legal. What about 42 = n?\n",
    "How about x = y = 1?\n",
    "\n",
    "In some languages every statement ends with a semi-colon, ;. What happens if you put a semi-colon at the end of a Python statement? What if you put a period at the end of a statement?\n",
    "\n",
    "In math notation you can multiply x and y like this: x y. What happens if you try that in Python?\n",
    "\n",
    "Exercise 2  \n",
    "Practice using the Python interpreter as a calculator:\n",
    "The volume of a sphere with radius r is 4/3 π r3. What is the volume of a sphere with radius 5?\n",
    "\n",
    "Suppose the cover price of a book is $24.95, but bookstores get a 40% discount. Shipping costs $3 for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?\n",
    "\n",
    "If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "381d7977",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = y = 1;\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bae82c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "r = 5\n",
    "import math\n",
    "V = (4/3)*pow(r,3)*(math.pi)\n",
    "print(V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2974d34",
   "metadata": {},
   "outputs": [],
   "source": [
    "coverPrice = 24.95\n",
    "copies = 60\n",
    "wholesale = (copies*0.75)+3+(copies*0.6)\n",
    "print(wholesale)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5857e4a2",
   "metadata": {},
   "source": [
    "Exercise 1  \n",
    "Read the documentation of the string methods at http://docs.python.org/3/library/stdtypes.html#string-methods. \n",
    "\n",
    "The documentation uses a syntax that might be confusing. For example, in find(sub[, start[, end]]), the brackets indicate optional arguments. So sub is required, but start is optional, and if you include start, then end is optional.\n",
    "\n",
    "Exercise 2  \n",
    "There is a string method called count that is similar to the function in Section 8.7. Read the documentation of this method and write an invocation that counts the number of a’s in 'banana'.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c808a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = \"banana\"\n",
    "string.count('a')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "103b9073",
   "metadata": {},
   "source": [
    "Exercise 3  \n",
    "A string slice can take a third index that specifies the “step size”; that is, the number of spaces between successive characters. A step size of 2 means every other character; 3 means every third, etc.\n",
    "fruit = 'banana'\n",
    "fruit[0:5:2]\n",
    "'bnn'\n",
    "A step size of -1 goes through the word backwards, so the slice [::-1] generates a reversed string.\n",
    "Use this idiom to write a one-line version of is_palindrome from Exercise 3.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5683b664",
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "\n",
    "def first(word):\n",
    "    \"\"\"Returns the first character of a string.\"\"\"\n",
    "    return word[0]\n",
    "\n",
    "\n",
    "def last(word):\n",
    "    \"\"\"Returns the last of a string.\"\"\"\n",
    "    return word[-1]\n",
    "\n",
    "\n",
    "def middle(word):\n",
    "    \"\"\"Returns all but the first and last characters of a string.\"\"\"\n",
    "    return word[1:-1]\n",
    "\n",
    "\n",
    "def is_palindrome(word):\n",
    "    \"\"\"Returns True if word is a palindrome.\"\"\"\n",
    "    if len(word) <= 1:\n",
    "        return True\n",
    "    if first(word) != last(word):\n",
    "        return False\n",
    "    return is_palindrome(middle(word))\n",
    "\n",
    "\n",
    "print(is_palindrome('allen'))\n",
    "print(is_palindrome('bob'))\n",
    "print(is_palindrome('otto'))\n",
    "print(is_palindrome('redivider'))\n",
    "\n",
    "def is_palindrome(word):\n",
    "    return word == word[::-1]\n",
    "print(is_palindrome(\"aba\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d6a3263",
   "metadata": {},
   "source": [
    "Exercise 4  \n",
    "The following functions are all intended to check whether a string contains any lowercase letters, \n",
    "but at least some of them are wrong. \n",
    "For each function, describe what the function actually does (assuming that the parameter is a string)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c6db97e",
   "metadata": {},
   "outputs": [],
   "source": [
    "    \n",
    "\n",
    "def any_lowercase1(s):\n",
    "    for c in s:\n",
    "        if c.islower():\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "\n",
    "def any_lowercase2(s):\n",
    "    for c in s:\n",
    "        if 'c'.islower():\n",
    "            return 'True'\n",
    "        else:\n",
    "            return 'False'\n",
    "\n",
    "def any_lowercase3(s):\n",
    "    for c in s:\n",
    "        flag = c.islower()\n",
    "    return flag\n",
    "\n",
    "# correct\n",
    "def any_lowercase4(s):\n",
    "    flag = False\n",
    "    for c in s:\n",
    "        flag = flag or c.islower()\n",
    "    return flag\n",
    "\n",
    "def any_lowercase5(s):\n",
    "    for c in s:\n",
    "        if not c.islower():\n",
    "            return False\n",
    "    return True\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ebe13dd",
   "metadata": {},
   "source": [
    "Exercise 5  \n",
    "A Caesar cypher is a weak form of encryption that involves “rotating” each letter by a fixed number of places. \n",
    "To rotate a letter means to shift it through the alphabet, wrapping around to the beginning if necessary, \n",
    "so ’A’ rotated by 3 is ’D’ and ’Z’ rotated by 1 is ’A’.\n",
    "To rotate a word, rotate each letter by the same amount. For example, “cheer” rotated by 7 is “jolly” and “melon”\n",
    "rotated by -10 is “cubed”. In the movie 2001: A Space Odyssey, the ship computer is called HAL, which is IBM \n",
    "    rotated by -1.\n",
    "\n",
    "Write a function called rotate_word that takes a string and an integer as parameters, \n",
    "and returns a new string that contains the letters from the original string rotated by the given amount.\n",
    "\n",
    "You might want to use the built-in function ord, which converts a character to a numeric code, \n",
    "and chr, which converts numeric codes to characters. Letters of the alphabet are encoded in alphabetical order, \n",
    "so for example:\n",
    "\n",
    "ord('c') - ord('a')\n",
    "2\n",
    "\n",
    "Because 'c' is the two-eth letter of the alphabet. But beware: the numeric codes for upper case letters \n",
    "    are different.\n",
    "\n",
    "Solution: https://thinkpython.com/code/rotate.py."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
